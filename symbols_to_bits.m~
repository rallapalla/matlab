function [ bits ] = symbols_to_bits( symbols, M )

    % Erzeuge leeren Bitvektor
    bits = zeros(1,length(symbols)*log2(M));

    % Normiere Symbole
    symbols = symbols/sqrt(sum(symbols .* conj(symbols))/length(symbols));

    rel = cell(2,M);
    
    for i = 1:M
       val = i-1;
       rel{1,i} = zeros(1,log2(M));
       for j = log2(M):1
           if val >= 2^j
               rel{1,i}(j) = 1;
               val = val-2^j;
           end
       end
    end
    
    switch M
        case 2
            rel{1,1}  = [ 0 ];
            rel{1,2}  = [ 1 ];  
        case 4
            rel{1,1}  = [ 0 0 ];
            rel{1,2}  = [ 0 1 ];
            rel{1,3}  = [ 1 0 ];
            rel{1,4}  = [ 1 1 ];
        case 8
            rel{1,1}  = [ 0 0 0 ];
            rel{1,2}  = [ 0 0 1 ];
            rel{1,3}  = [ 0 1 0 ];
            rel{1,4}  = [ 0 1 1 ];
            rel{1,5}  = [ 1 0 0 ];
            rel{1,6}  = [ 1 0 1 ];
            rel{1,7}  = [ 1 1 0 ];
            rel{1,8}  = [ 1 1 1 ];
        case 16
            rel{1,1}  = [ 0 0 0 0 ];
            rel{1,2}  = [ 0 0 0 1 ];
            rel{1,3}  = [ 0 0 1 0 ];
            rel{1,4}  = [ 0 0 1 1 ];
            rel{1,5}  = [ 0 1 0 0 ];
            rel{1,6}  = [ 0 1 0 1 ];
            rel{1,7}  = [ 0 1 1 0 ];
            rel{1,8}  = [ 0 1 1 1 ];
            rel{1,9}  = [ 1 0 0 0 ];
            rel{1,10} = [ 1 0 0 1 ];
            rel{1,11} = [ 1 0 1 0 ];
            rel{1,12} = [ 1 0 1 1 ];
            rel{1,13} = [ 1 1 0 0 ];
            rel{1,14} = [ 1 1 0 1 ];
            rel{1,15} = [ 1 1 1 0 ];
            rel{1,16} = [ 1 1 1 1 ];
    end

    for i = 1:M
       rel{2,i} = bits_to_symbols(rel{1,i}, M);
    end

    for i = 1:length(symbols)
        dist = inf;
        for j = 1:M
            if abs(symbols(i)-rel{2,j}) < dist
                dist = abs(symbols(i)-rel{2,j});
                bits((i-1)*log2(M)+1:(i-1)*log2(M)+log2(M)) = rel{1,j};
            end
        end
    end

end

